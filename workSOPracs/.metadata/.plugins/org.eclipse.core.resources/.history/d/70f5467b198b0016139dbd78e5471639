#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types>
#include "mytar.h"

extern char *use;

/** Copy nBytes bytes from the origin file to the destination file.
 *
 * origin: pointer to the FILE descriptor associated with the origin file
 * destination:  pointer to the FILE descriptor associated with the destination file
 * nBytes: number of bytes to copy
 *
 * Returns the number of bytes actually copied or -1 if an error occured.
 */
int copynFile(FILE * origin, FILE * destination, int nBytes){// copiamos nbytes de origen a destino

	//usaremos getc y putc en la practica
	// Complete the function

	/*FILE* fileOr=NULL;
	FILE* fileDst= NULL;*///no uso porque los ficheros ya vienen abiertos


	int c, ret, bytesLeidos = 0;
	while(((c = getc(origin))!= EOF) && bytesLeidos < nBytes){//getc devuelve un char modelado a int, por eso en putc debemos castear

		ret = putc((unsigned char) c, destination);
		if(feof(origin)){
			fclose(origin);
			err(3, "put failed");
		}
		else bytesLeidos++;

	}

	/*
	//abrimos origen y destino fopen
	fileOr = fopen(origin, "r");
	fileDst = fopen(destination, "w");
	

	//leemos origen con fread
	//escribimos con fwrite
	//cerramos ambos con fclose*/

	fclose(origin);
	fclose(destination);
	//DEVOLVEMOS EL NUMERO DE BYTES TRANSFERIDOS
	return bytesLeidos;
}

/** Loads a string from a file.
 *
 * file: pointer to the FILE descriptor 
 * 
 * The loadstr() function must allocate memory from the heap to store 
 * the contents of the string read from the FILE. 
 * Once the string has been properly built in memory, the function returns
 * the starting address of the string (pointer returned by malloc()) 
 * 
 * Returns: !=NULL if success, NULL if error
 */
char* loadstr(FILE * file){
	//LEE UNA CADENA DE CARACTERES FILE
	//LA FUNCION RESERVA MEMORIA PARA LA CADENA LEIDA
	//DEVOLVEMOS LA DIRECCION DE MEORIA DONDE COMIENZA LA CADENA

	// Complete the function
	return NULL;
}

/** Read tarball header and store it in memory.
 *
 * tarFile: pointer to the tarball's FILE descriptor 
 * nFiles: output parameter. Used to return the number 
 * of files stored in the tarball archive (first 4 bytes of the header).
 *
 * On success it returns the starting memory address of an array that stores 
 * the (name,size) pairs read from the tar file. Upon failure, the function returns NULL.
 */


stHeaderEntry* readHeader(FILE * tarFile, int *nFiles){// LEE LA CABECERA TARFILE Y COPIA LA INFORMACION EN EL HEADER Y LO DEVUELVE
	//NFILES TIENE EL NUMERO DE FICHEROS CONTENIDOS EN EL MTAR

	// Complete the function

	stHeaderEntry* cabeceras = NULL;
	int nr_files = 0, i;

	fscanf(tarFile, "%i", &nr_files); // leemos el numero de archivos que contiene el tar

	cabeceras = malloc(sizeof(stHeaderEntry)*nr_files); // reservamos espacio para el array de cabeceras

	for(i = 0; i < nr_files; i++){
			fscanf(tarFile, "%s", cabeceras[i]->name);// leemos nombre y lo pasamos al array de headers
			fscanf(tarFile, "%i", cabeceras[i]->size);//leemos tama単o

	}




	*nFiles = nr_files;
	return NULL;//DEVOLVEMOS HEADER CON LOS DATOS
}

/** Creates a tarball archive 
 *
 * nfiles: number of files to be stored in the tarball
 * filenames: array with the path names of the files to be included in the tarball
 * tarname: name of the tarball archive
 * 
 * On success, it returns EXIT_SUCCESS; upon error it returns EXIT_FAILURE. 
 * (macros defined in stdlib.h).
 *
 * HINTS: First reserve room in the file to store the tarball header.
 * Move the file's position indicator to the data section (skip the header)
 * and dump the contents of the source files (one by one) in the tarball archive. 
 * At the same time, build the representation of the tarball header in memory.
 * Finally, rewind the file's position indicator, write the number of files as well as 
 * the (file name,file size) pairs in the tar archive.
 *
 * Important reminder: to calculate the room needed for the header, a simple sizeof 
 * of stHeaderEntry will not work. Bear in mind that, on disk, file names found in (name,size) 
 * pairs occupy strlen(name)+1 bytes.
 *
 */
int createTar(int nFiles, char *fileNames[], char tarName[]){

	// Complete the function

	FILE* tarFile = NULL;
	int maxBytes = 10, bytesCopiados;

	tarFile = fopen(tarName, "w");//abrimos archivo pasado por tarname
	stHeaderEntry* cabeceras = NULL;
	int i, desplazamiento, tamCabeceras = 0  ;
/*	for(i = 0; i< nFiles; i++){
		fprintf(tarFile, "%s", &fileNames[i]);// leemos cada elemento y lo escribimos en tarfile
		//deberiamos escribir el tama単o de dicho fichero pero no sabemos su tama単o por tanto saltamos
		//salta dejando espacio a un int CON LSEEK多?
	}
	a partir de aqui abrimos cada archivo y copiamos en tarfile*/
	//calculo desplazamiento
	for(i = 0; i < nFiles; i++){
		tamCabeceras = tamCabeceras =sizeof(fileNames[i] + 1);
	}
	desplazamiento  = sizeof(int) + tamCabeceras+(nFiles * sizeof(unsigned int));
	lseek(tarFile, desplazamiento, SEEK_SET);//dejamos sitio para despues escribir las cabeceras


		//EMPEZAREMOS A ESCRIBIR DESDE LA PARTE DEL FICHERO TRAS HABER DESPLAZADO
	for(i = 0; i< nFiles; i++){
		FILE* fichero = NULL;//creamos un fichero para cada componente de filenames
		fichero = fopen(fileNames[i], "r+");//abrimos
		if((bytesCopiados = copynFile(fichero, tarFile, maxBytes) )< maxBytes){// copiamos de fichero a tarfile
			printf("Archivo  %s copiado",fileNames[i]);
		}//copiamos
		else{
			printf("FALLO al copiar el fichero %s", fileNames[i]);
		}

		cabeceras[i]->name = fileNames[i];
		cabeceras[i]->size = bytesCopiados;
		fclose(fichero);
	}


	lseek(tarFile, 0, SEEK_SET);//movemos cursor al principio y escribimos
	fprintf = (tarFile, "%i", &nFiles);//// escribimos el numero de nfiles en el tarfile
	for(i = 0; i< nFiles; i++){
			fprintf(tarFile, "%s", &cabeceras[i]->name);// leemos cada elemento y lo escribimos en tarfile
			fprintf(tarFile, "%i", &cabeceras[i]->size);
		}

	//tras copiar todos los ficheros, cerramos tarfile



	fclose(tarFile);
	return EXIT_FAILURE;
}

/** Extract files stored in a tarball archive
 *
 * tarName: tarball's pathname
 *
 * On success, it returns EXIT_SUCCESS; upon error it returns EXIT_FAILURE. 
 * (macros defined in stdlib.h).
 *
 * HINTS: First load the tarball's header into memory.
 * After reading the header, the file position indicator will be located at the 
 * tarball's data section. By using information from the 
 * header --number of files and (file name, file size) pairs--, extract files 
 * stored in the data section of the tarball.
 *
 */
int extractTar(char tarName[]){
	// Complete the function
	return EXIT_FAILURE;
}
